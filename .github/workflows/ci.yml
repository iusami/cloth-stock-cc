name: Continuous Integration

# ワークフロートリガー: mainブランチpush + mainへのPR（重複実行排除）
on:
  push:
    branches: [ 'main' ]  # mainブランチのみ（マージ後の品質確認）
  pull_request:
    branches: [ 'main' ]  # mainへのPRのみ（開発テスト）

# 並行実行制御（同じPRで複数回実行時は最新のみ）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 統合された高速CIジョブ - 最も重要なチェックを効率的に実行
  fast-ci:
    name: Fast CI Pipeline (Optimized)
    runs-on: ubuntu-latest
    
    # GitHub Token権限設定
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write
    
    # タイムアウト設定（最適化により短縮）
    timeout-minutes: 8
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 深い履歴は不要 - 高速化
        fetch-depth: 1
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # 2025年最新: Gradle Build Action で最大限のキャッシュ効率を実現
    - name: Setup Gradle with advanced caching
      uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true
        cache-read-only: ${{ github.event_name == 'pull_request' }}
        # Build Scan で継続的なパフォーマンス監視
        build-scan-publish: true
        build-scan-terms-of-use-agree: "yes"
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    # ビルド時間測定開始
    - name: Record build start time
      run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV
      
    # 並列実行: テスト + リント + デバッグビルドを同時実行
    - name: Run tests, lint, and build in parallel
      run: |
        # 増分ビルドを活用（cleanなし）- 大幅な時間短縮
        echo "🚀 Starting optimized parallel build..."
        ./gradlew --parallel --max-workers=4 \
          testDebugUnitTest \
          lintDebug \
          assembleDebug \
          --stacktrace \
          --continue \
          --build-cache \
          --configuration-cache
      env:
        # 2025年最適化: CI環境専用メモリ設定（G1GC統一）
        GRADLE_OPTS: "-Xmx3g -XX:MaxMetaspaceSize=512m -XX:+UseG1GC -XX:+UseStringDeduplication -XX:G1HeapRegionSize=8m"
        CI: "true"
        # ビルドキャッシュの最適化
        ORG_GRADLE_PROJECT_android.enableBuildCache: "true"
      
    # ビルド時間測定と結果表示
    - name: Calculate and display build time
      run: |
        BUILD_END_TIME=$(date +%s)
        BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
        echo "⏱️ Build completed in ${BUILD_DURATION} seconds"
        echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV
        
        # 成功メッセージ
        echo "✅ Fast CI Pipeline completed successfully!"
        echo "📊 Performance metrics:"
        echo "   - Build time: ${BUILD_DURATION}s"
        echo "   - Parallel workers: 4"
        echo "   - Configuration cache: enabled"
        echo "   - Build cache: enabled"
      
    # 高速テストレポート生成
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Fast CI Test Results
        path: '**/build/test-results/testDebugUnitTest/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false
        
    # 条件付きアーティファクト生成（失敗時は詳細、成功時は最小限）
    - name: Upload debug APK (success only)
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: debug-apk-${{ github.run_number }}
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7  # 短縮してストレージ効率化
        
    - name: Upload detailed logs (failure only)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: failure-logs-${{ github.run_number }}
        path: |
          **/build/reports/
          **/build/test-results/
        retention-days: 3  # 短縮してストレージ効率化

  # 追加チェック（プルリクエスト時のみ実行し、mainブランチマージ時は省略）
  extended-checks:
    name: Extended Checks (PR Only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: fast-ci
    
    timeout-minutes: 6
    
    permissions:
      contents: read
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle with caching
      uses: gradle/gradle-build-action@v3
      with:
        cache-read-only: true  # PRでは読み取り専用
        gradle-home-cache-cleanup: true
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    # Detekt実行（lintは既にfast-ciで実行済み）
    - name: Run Detekt analysis
      run: ./gradlew detekt --stacktrace
      env:
        GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=384m -XX:+UseG1GC -XX:+UseStringDeduplication"
        CI: "true"
      
    # コードカバレッジ（テストは既に実行済みなので、レポート生成のみ）
    - name: Generate code coverage report
      run: ./gradlew jacocoTestReport --stacktrace
      env:
        GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=384m -XX:+UseG1GC -XX:+UseStringDeduplication"
        CI: "true"
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: 'app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
        flags: unittests
        fail_ci_if_error: false
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: analysis-results-${{ github.run_number }}
        path: |
          **/build/reports/detekt/
          app/config/detekt/baseline.xml
        retention-days: 3